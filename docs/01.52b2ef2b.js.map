{"version":3,"sources":["lib.ts","01.ts"],"names":[],"mappings":"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","file":"01.52b2ef2b.js","sourceRoot":"..","sourcesContent":["export function getEstimateMean(values: number[], N: number) {\n  if (values.length !== N) {\n    throw new Error(\"Wrong N\");\n  }\n  return values.reduce((cur, acc) => cur + acc, 0) / N;\n}\n\nexport function getEstimateD(\n  values: number[],\n  estimatedMean: number,\n  N: number\n) {\n  if (values.length !== N) {\n    throw new Error(\"Wrong N\");\n  }\n  return (\n    values.map((x) => x * x).reduce((cur, acc) => cur + acc, 0) / (N - 1) -\n    (N * (estimatedMean * estimatedMean)) / (N - 1)\n  );\n}\n\nexport function getNormalSet(n: number) {\n  const a = 0;\n  const b = 1;\n  const M_each = (b - a) / 2 + a;\n  const D_each = (b - a) ** 2 / 12;\n\n  const sum_n = 12;\n\n  const selection: number[] = [];\n  for (let i = 0; i < n; i++) {\n    let sum_value = 0;\n    for (let ii = 0; ii < sum_n; ii++) {\n      const rand = Math.random();\n      const val_intermidiate = a + rand * (b - a);\n      sum_value += val_intermidiate;\n    }\n    const val =\n      (sum_value - sum_n * M_each) / (Math.sqrt(D_each) * Math.sqrt(sum_n));\n    selection.push(val);\n  }\n  return selection;\n}\n\nconst nbsp = \"\\xa0\";\n\nexport function log(s: string) {\n  const logDiv = document.getElementById(\"log\") as HTMLDivElement;\n\n  const line = document.createElement(\"div\");\n  line.innerHTML = s || nbsp;\n  logDiv.appendChild(line);\n}\n\nexport function summ(from: number, to: number, f: (n: number) => number) {\n  let s = 0;\n  for (let i = from; i <= to; i++) {\n    s += f(i);\n  }\n  return s;\n}\n","import { getNormalSet, getEstimateMean, getEstimateD, log } from \"./lib\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\nconst n = 20;\nconst mySelection = getNormalSet(n).map((x) => Math.round(x * 10) + 30);\n\nmySelection.sort((a, b) => a - b);\nlog(\"Выборка:\");\nlog(mySelection.map((x) => x).join(\" \"));\nconst min = mySelection[0];\nconst max = mySelection[n - 1];\nconst len = max - min;\nlog(`Размах = ${len}`);\n\nlet longestSeries = 1;\nlet currentSeries = 1;\nlet longestSeriesValue = 0;\nlet previousValue = mySelection[0];\nfor (let i = 1; i < n; i++) {\n  const val = mySelection[i];\n  if (val === previousValue) {\n    currentSeries++;\n  } else {\n    if (currentSeries > longestSeries) {\n      longestSeries = currentSeries;\n      longestSeriesValue = previousValue;\n    }\n    currentSeries = 1;\n  }\n  previousValue = val;\n}\nlog(`Мода = ${longestSeriesValue} (${longestSeries} раз)`);\n\nconst median =\n  (mySelection[Math.floor(n / 2) - 1] + mySelection[Math.floor(n / 2)]) / 2;\nlog(`Медиана = ${median}`);\nconst mean = getEstimateMean(mySelection, n);\nlog(`Среднее = ${mean}`);\nlog(`Дисперсия = ${getEstimateD(mySelection, mean, n)}`);\n\nconst M = 1 + Math.floor(Math.log2(n));\n\nconst h = len / M;\n\nlog(`Кол-во диапазонов=${M}, размер каждого=${h}`);\n\nconst context = canvas.getContext(\"2d\");\n\nconst X_SCALE = 5;\nconst Y_SCALE = 1000;\nconst Y_HEIGHT = 100;\n\nlet pos = 0;\nfor (let i = 0; i < M; i++) {\n  const to = min + h * (i + 1);\n  let count = 0;\n  while (pos < n && mySelection[pos] < to) {\n    pos++;\n    count++;\n  }\n  if (i === M - 1) {\n    if (to <= max) {\n      count += 1;\n    }\n  }\n\n  const heightRaw = count / (n * h);\n  log(\n    `  Диапазон ${\n      to - h\n    }..${to} имеет ${count} элементов, высота = ${heightRaw}`\n  );\n\n  const x = X_SCALE * (min + h * i);\n  const width = X_SCALE * h;\n  const height = Y_SCALE * heightRaw;\n  const y = Y_HEIGHT - 20 - height;\n  context.rect(x, y, width, height);\n  context.fill();\n}\n\nfor (let i = 0; i <= M; i++) {\n  const pos = min + h * i;\n  context.strokeText(`${pos.toFixed(2)}`, pos * X_SCALE, Y_HEIGHT);\n}\n\nlog(`Горизотальный масштаб = x${X_SCALE}, вертикальный = x${Y_SCALE}`);\n"]}