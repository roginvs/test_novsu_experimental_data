{"version":3,"sources":["lib.ts","node_modules/js-stats/src/jsstats.js","node_modules/js-stats/index.js","node_modules/inv-chisquare-cdf/src/logGamma.js","node_modules/inv-chisquare-cdf/src/regLowGamma.js","node_modules/inv-chisquare-cdf/src/invRegLowGamma.js","node_modules/inv-chisquare-cdf/src/invChiSquareCDF.js","node_modules/inv-chisquare-cdf/src/index.js","stat.chi_square.ts","stat.statistics-distributions-001.ts","stat.ts","08.ts"],"names":[],"mappings":"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","file":"08.69eb3cd9.js","sourceRoot":"..","sourcesContent":["export function getEstimateMean(values: number[], N: number) {\n  if (values.length !== N) {\n    throw new Error(\"Wrong N\");\n  }\n  return values.reduce((cur, acc) => cur + acc, 0) / N;\n}\n\nexport function getEstimateD(\n  values: number[],\n  estimatedMean: number,\n  N: number\n) {\n  if (values.length !== N) {\n    throw new Error(\"Wrong N\");\n  }\n  return (\n    values.map((x) => x * x).reduce((cur, acc) => cur + acc, 0) / (N - 1) -\n    (N * (estimatedMean * estimatedMean)) / (N - 1)\n  );\n}\n\nexport function getNormalSet(n: number) {\n  const a = 0;\n  const b = 1;\n  const M_each = (b - a) / 2 + a;\n  const D_each = (b - a) ** 2 / 12;\n\n  const sum_n = 12;\n\n  const selection: number[] = [];\n  for (let i = 0; i < n; i++) {\n    let sum_value = 0;\n    for (let ii = 0; ii < sum_n; ii++) {\n      const rand = Math.random();\n      const val_intermidiate = a + rand * (b - a);\n      sum_value += val_intermidiate;\n    }\n    const val =\n      (sum_value - sum_n * M_each) / (Math.sqrt(D_each) * Math.sqrt(sum_n));\n    selection.push(val);\n  }\n  return selection;\n}\n\nconst nbsp = \"\\xa0\";\n\nexport function log(s: string) {\n  const logDiv = document.getElementById(\"log\") as HTMLDivElement;\n\n  const line = document.createElement(\"div\");\n  line.innerHTML = s || nbsp;\n  logDiv.appendChild(line);\n}\n\nexport function summ(from: number, to: number, f: (n: number) => number) {\n  let s = 0;\n  for (let i = from; i <= to; i++) {\n    s += f(i);\n  }\n  return s;\n}\n","var jsstats = jsstats || {};\r\n\r\n(function(jss){\r\n\tvar NormalDistribution = function(mean, sd){\r\n\t\tif(!mean) {\r\n\t\t\tmean = 0.0;\r\n\t\t}\r\n\t\tif(!sd) {\r\n\t\t\tsd = 1.0;\r\n\t\t}\r\n\t\tthis.mean = mean;\r\n\t\tthis.sd = sd;\r\n\t\tthis.Sqrt2 = 1.4142135623730950488016887;\r\n\t\tthis.Sqrt2PI = 2.50662827463100050242E0;\r\n\t\tthis.lnconstant = -Math.log(this.Sqrt2PI * sd);\r\n\t};\r\n\r\n\tNormalDistribution.prototype.sample = function() {\r\n\r\n\t};\r\n\r\n\tNormalDistribution.prototype.cumulativeProbability = function(x) {\r\n\t\tvar z = (x - this.mean) / (this.Sqrt2 * this.sd);\r\n\t\treturn 0.5 + 0.5 * this.errorFunc(z);\r\n\t};\r\n\r\n\tNormalDistribution.prototype.invCumulativeProbability = function(p) {\r\n\t\tvar Z = this.Sqrt2 * this.invErrorFunc(2 * p - 1);\r\n        return Z * this.sd + this.mean;\r\n\t};\r\n\r\n\tNormalDistribution.prototype.errorFunc = function(z){\r\n\t\tvar t = 1.0 / (1.0 + 0.5 * Math.abs(z));\r\n\r\n\t    // use Horner's method\r\n\t    var ans = 1 - t * Math.exp(-z * z - 1.26551223 +\r\n\t                                        t * (1.00002368 +\r\n\t                                        t * (0.37409196 +\r\n\t                                        t * (0.09678418 +\r\n\t                                        t * (-0.18628806 +\r\n\t                                        t * (0.27886807 +\r\n\t                                        t * (-1.13520398 +\r\n\t                                        t * (1.48851587 +\r\n\t                                        t * (-0.82215223 +\r\n\t                                        t * (0.17087277))))))))));\r\n            if (z >= 0) return ans;\r\n            else return -ans;\r\n\t};\r\n\r\n\tNormalDistribution.prototype.invErrorFunc = function(x){\r\n\t\tvar z;\r\n        var a = 0.147;\r\n        var the_sign_of_x;\r\n        if (0 == x)\r\n        {\r\n            the_sign_of_x = 0;\r\n        }\r\n        else if (x > 0)\r\n        {\r\n            the_sign_of_x = 1;\r\n        }\r\n        else\r\n        {\r\n            the_sign_of_x = -1;\r\n        }\r\n\r\n        if (0 != x)\r\n        {\r\n            var ln_1minus_x_sqrd = Math.log(1 - x * x);\r\n            var ln_1minusxx_by_a = ln_1minus_x_sqrd / a;\r\n            var ln_1minusxx_by_2 = ln_1minus_x_sqrd / 2;\r\n            var ln_etc_by2_plus2 = ln_1minusxx_by_2 + (2 / (Math.PI * a));\r\n            var first_sqrt = Math.sqrt((ln_etc_by2_plus2 * ln_etc_by2_plus2) - ln_1minusxx_by_a);\r\n            var second_sqrt = Math.sqrt(first_sqrt - ln_etc_by2_plus2);\r\n            z = second_sqrt * the_sign_of_x;\r\n        }\r\n        else\r\n        { // x is zero\r\n            z = 0;\r\n        }\r\n        return z;\r\n\t};\r\n\r\n\tjss.NormalDistribution = NormalDistribution;\r\n\r\n\tvar TDistribution = function(df){\r\n\t\tif(df){\r\n\t\t\tthis.df = df;\r\n\t\t}\r\n\t};\r\n\r\n\tTDistribution.prototype.LogGamma = function(Z) {\r\n\t\twith (Math) {\r\n\t\t\tvar S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\r\n\t\t\tvar LG= (Z-.5)*log(Z+4.5)-(Z+4.5)+log(S*2.50662827465);\r\n\t\t}\r\n\t\treturn LG\r\n\t}\r\n\r\n\tTDistribution.prototype.Betinc = function(X,A,B) {\r\n\t\tvar A0=0;\r\n\t\tvar B0=1;\r\n\t\tvar A1=1;\r\n\t\tvar B1=1;\r\n\t\tvar M9=0;\r\n\t\tvar A2=0;\r\n\t\tvar C9;\r\n\t\twhile (Math.abs((A1-A2)/A1)>.00001) {\r\n\t\t\tA2=A1;\r\n\t\t\tC9=-(A+M9)*(A+B+M9)*X/(A+2*M9)/(A+2*M9+1);\r\n\t\t\tA0=A1+C9*A0;\r\n\t\t\tB0=B1+C9*B0;\r\n\t\t\tM9=M9+1;\r\n\t\t\tC9=M9*(B-M9)*X/(A+2*M9-1)/(A+2*M9);\r\n\t\t\tA1=A0+C9*A1;\r\n\t\t\tB1=B0+C9*B1;\r\n\t\t\tA0=A0/B1;\r\n\t\t\tB0=B0/B1;\r\n\t\t\tA1=A1/B1;\r\n\t\t\tB1=1;\r\n\t\t}\r\n\t\treturn A1/A\r\n\t}\r\n\r\n\tTDistribution.prototype.cumulativeProbability = function(X, df) {\r\n\t\tif(!df) {\r\n\t\t\tdf = this.df;\r\n\t\t}\r\n\r\n\t    with (Math) {\r\n\t\t\tif (df<=0) {\r\n\t\t\t\tconsole.error(\"Degrees of freedom must be positive\");\r\n\t\t\t} else {\r\n\t\t\t\tA=df/2;\r\n\t\t\t\tS=A+.5;\r\n\t\t\t\tZ=df/(df+X*X);\r\n\t\t\t\tBT=exp(this.LogGamma(S)-this.LogGamma(.5)-this.LogGamma(A)+A*log(Z)+.5*log(1-Z));\r\n\t\t\t\tif (Z<(A+1)/(S+2)) {\r\n\t\t\t\t\tbetacdf=BT*this.Betinc(Z,A,.5)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbetacdf=1-BT*this.Betinc(1-Z,.5,A)\r\n\t\t\t\t}\r\n\t\t\t\tif (X<0) {\r\n\t\t\t\t\ttcdf=betacdf/2\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttcdf=1-betacdf/2\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttcdf=round(tcdf*100000)/100000;\r\n\t\t}\r\n    \treturn tcdf;\r\n\t};\r\n\r\n\tTDistribution.prototype.invCumulativeProbability = function(p, df) {\r\n\t\tif(!df){\r\n\t\t\tdf = this.df;\r\n\t\t}\r\n\t\tvar delta = 0.005;\r\n        \r\n        if(p >= 0.5) {\r\n            var Z1 = 0;\r\n            for(Z = 0; Z < 100; Z++) {\r\n                if(this.cumulativeProbability(Z, df) >= p){\r\n                    break;\r\n                }\r\n                Z1 = Z;\r\n            }\r\n            var Z2 = Z1;\r\n            for(var Z = 0.0; Z < 100.0; Z+=1.0) {\r\n                \r\n                if(this.cumulativeProbability(Z1 + Z / 100.0) >= p){\r\n                    break;\r\n                }\r\n                Z2 = Z1 + (Z)/100.0;\r\n            }\r\n            var Z3 = Z2;\r\n            for(var Z = 0.0; Z < 100.0; Z+=1.0) {\r\n                \r\n                if(this.cumulativeProbability(Z2 + Z / 10000.0) >= p){\r\n                    break;\r\n                }\r\n                Z3 = Z2 + (Z)/10000.0;\r\n            }\r\n            return Z3;\r\n        } else {\r\n            var Z1 = 0;\r\n            for(var Z = 0; Z < 100; Z++) {\r\n                if(this.cumulativeProbability(-Z, df) <= p){\r\n                    break;\r\n                }\r\n                Z1 = Z;\r\n            }\r\n            var Z2 = Z1;\r\n            for(var Z = 0.0; Z < 100.0; Z+=1.0) {\r\n                \r\n                if(this.cumulativeProbability(-Z1 - Z / 100.0) <= p){\r\n                    break;\r\n                }\r\n                Z2 = Z1 + (Z) / 100.0;\r\n            }\r\n            var Z3 = Z2;\r\n            for(var Z = 0.0; Z < 100.0; Z+=1.0) {\r\n                \r\n                if(this.cumulativeProbability(-Z2 - Z / 10000.0) <= p){\r\n                    break;\r\n                }\r\n                Z3 = Z2 + (Z)/10000.0;\r\n            }\r\n            return -Z3;\r\n        }\r\n    };\r\n\r\n\tjss.TDistribution = TDistribution;\r\n\r\n    var FDistribution = function(df1, df2) {\r\n        this.df1 = df1;\r\n        this.df2 = df2;\r\n        this.EPSILON = 0.0000000001;\r\n    };\r\n\r\n    FDistribution.prototype.L504 = function(a, f, b, iv)\r\n    {\r\n        var q = a * f / (a * f + b);\r\n        var sa = Math.sqrt(q);\r\n        var sl = Math.log(sa);\r\n        var ca = Math.sqrt(1 - q);\r\n        var cl = Math.log(ca);\r\n        var al = Math.atan(sa / Math.sqrt(-sa * sa + 1));\r\n        var fp = 1 - 2 * al / Math.PI;\r\n        var r = 0.0;\r\n        if (b != 1)\r\n        {\r\n            var c = Math.log(2 * sa / Math.PI);\r\n            fp -= Math.exp(c + cl);\r\n            if (b != 3)\r\n            {\r\n                var n = Math.floor((b - 3) / 2);\r\n                for (var i = 1; i <= n; i++)\r\n                {\r\n                    var x = 2 * i + 1;\r\n                    r += Math.log((x - 1) / x);\r\n                    var rr = r + cl * x + c;\r\n                    if (rr > -78.4)\r\n                    {\r\n                        fp -= Math.exp(rr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (a != 1)\r\n        {\r\n            var c = r;\r\n\r\n            if (b > 1)\r\n            {\r\n                c += Math.log(b - 1);\r\n            }\r\n\r\n            c += Math.log(2 / Math.PI) + sl + cl * b;\r\n\r\n            if (c > -78.4) { fp += Math.exp(c); }\r\n\r\n            if (a != 3)\r\n            {\r\n                var n = Math.floor((a - 3) / 2);\r\n                r = 0;\r\n                for (var i = 1; i <= n; i++)\r\n                {\r\n                    var x = i * 2 + 1;\r\n                    r += Math.log((b + x - 2) / x);\r\n                    var rr = r + sl * (x - 1) + c;\r\n                    if (rr > -78.4) { fp += Math.exp(rr); }\r\n                }\r\n            }\r\n        }\r\n        return fp;\r\n\r\n    };\r\n\r\n    FDistribution.prototype.L401 = function(a, f, b, iv)\r\n    {\r\n        var q = a * f / (a * f + b);\r\n        var ql = Math.log(q);\r\n        var fp = 0.0;\r\n        var c = Math.log(1 - q) * b / 2;\r\n        if (c > -78.4)\r\n        {\r\n            fp = Math.exp(c);\r\n        }\r\n\r\n        if (a != 2)\r\n        {\r\n            var n = Math.floor(a / 2 - 1);\r\n            var r = 0.0;\r\n            for (var i = 1; i <= n; i++)\r\n            {\r\n                var x = 2 * i;\r\n                r += Math.log(b + x - 2) - Math.log(x) + ql;\r\n                if (r + c > -78.4)\r\n                {\r\n                    fp += Math.exp(r + c);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (iv == 1)\r\n        {\r\n            fp = 1 - fp;\r\n        }\r\n\r\n        return fp;\r\n    };\r\n\r\n    FDistribution.prototype.ProbF = function(dn, dd, fr)\r\n    {\r\n        var f = fr;\r\n        var a = dn;\r\n        var b = dd;\r\n        var iv = 0;\r\n\r\n        if (Math.floor(a / 2) * 2 == a)\r\n        {\r\n            //even numerator df\r\n            var fp = this.L401(a, f, b, iv);\r\n            return fp;\r\n        }\r\n        else if (Math.floor(b / 2) * 2 != b)\r\n        {\r\n            var fp = this.L504(a, f, b, iv);\r\n            return fp;\r\n        }\r\n\r\n        f = 1 / f;\r\n        a = dd;\r\n        b = dn;\r\n        iv = 1;\r\n        return this.L401(a, f, b, iv);\r\n\r\n    };\r\n\r\n    FDistribution.prototype.cumulativeProbability = function(F) {\r\n        if (this.df1 > .01 & this.df2 > .01 & F > this.EPSILON)\r\n        {\r\n            var p = 1 - this.ProbF(this.df1, this.df2, F);\r\n            return p;\r\n        }\r\n        else\r\n        {\r\n            console.error(\"df1, df2, and F must be numbers greater than 0.\");\r\n        }\r\n    };\r\n\r\n    jss.FDistribution = FDistribution;\r\n\r\n    var ChiSquareDistribution = function(df) {\r\n        this.df = df;\r\n    };\r\n\r\n    ChiSquareDistribution.prototype.ChiSquaredProbability = function(x) {\r\n        var a, y = 0, s, e, c, z, val;\r\n        var df = this.df;\r\n        var bigx = 20.0;\r\n        var logSqrtPi = Math.log(Math.sqrt(Math.PI));\r\n        var rezSqrtPi = 1 / Math.sqrt(Math.PI);\r\n        if (x <= 0 || df < 1)\r\n            return (1);\r\n        a = 0.5 * x;\r\n        even = ((parseInt(2 * (df / 2), 2)) == df);\r\n        if (df > 1)\r\n            y = Math.exp(-a); //((-a < -bigx) ? 0.0 : Math.exp (-a));\r\n        s = (even ? y : (2.0 * (new jsstats.NormalDistribution(0.0, 1.0).cumulativeProbability(-Math.sqrt(x)))));\r\n        if (df > 2)\r\n        {\r\n            x = 0.5 * (df - 1.0);\r\n            z = (even ? 1.0 : 0.5);\r\n            if (a > bigx)\r\n            {\r\n                e = (even ? 0.0 : logSqrtPi);\r\n                c = Math.log(a);\r\n                while (z <= x)\r\n                {\r\n                    e = Math.log(z) + e;\r\n                    val = c * z - a - e;\r\n                    s += Math.exp(val); //((val < -bigx) ? 0.0 : Math.exp (val));\r\n                    z += 1.0;\r\n                }\r\n                return (s);\r\n            }\r\n            else\r\n            {\r\n                e = (even ? 1.0 : (rezSqrtPi / Math.sqrt(a)));\r\n                c = 0.0;\r\n                while (z <= x)\r\n                {\r\n                    e = e * (a / z);\r\n                    c = c + e;\r\n                    z += 1.0;\r\n                }\r\n                return (c * y + s);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return (s);\r\n        }\r\n    };\r\n\r\n    ChiSquareDistribution.prototype.cumulativeProbability = function(x) {\r\n        return 1 - this.ChiSquaredProbability(x);\r\n    };\r\n\r\n    jss.ChiSquareDistribution = ChiSquareDistribution;\r\n\r\n})(jsstats);\r\n\r\nvar module = module || {};\r\nif(module) {\r\n\tmodule.exports = jsstats;\r\n}","module.exports = require('./src/jsstats');","module.exports = function logGamma(x) {\n  if (x===1 || x===2) {\n    return 0;\n  } else if (x===0) {\n    return Infinity;\n  } else if (isNaN(x)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error(`The value is not a number.`);\n  } else if (x<0) {\n    throw new Error(`The value is a negative number.`);\n  }\n\n  // Lanczos approximation\n  const cof = [\n    76.18009172947146,\n    -86.50532032941677,\n    24.01409824083091,\n    -1.231739572450155,\n    0.1208650973866179e-2,\n    -0.5395239384953e-5,\n  ];\n  let ser = 1.000000000190015;\n\n  let xx;\n  let y;\n  let tmp;\n  tmp = (y = xx = x) + 5.5;\n  tmp -= (xx + 0.5) * Math.log(tmp);\n\n  cof.map((approximation)=>{\n    ser += approximation / ++y;\n  });\n\n  return Math.log(2.5066282746310005 * ser / xx) - tmp;\n};\n","const logGamma = require('./logGamma.js');\n\nmodule.exports = function regLowGamma(a, x) {\n  if (isNaN(a)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param a is not a number.');\n  } else if (isNaN(x)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param x is not a number.');\n  } else if (a <= 0) {\n    throw new Error('The number in param a is equal or less tham 0.');\n  } else if (x<0) {\n    throw new Error('The number in param x is a negative number.');\n  }\n\n  const logGammaOfA = logGamma(a);\n  let b = x + 1 - a;\n  let c = 1 / 1.0e-30;\n  let d = 1 / b;\n  let h = d;\n  let i = 1;\n  const maxOfIterationsForA = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n\n  if (x < a + 1) {\n    let sum = 1 / a;\n    let del = sum;\n    for (let ap = a; i <= maxOfIterationsForA; i++) {\n      sum += del *= x / ++ap;\n    }\n    return (sum * Math.exp(-x + a * Math.log(x) - (logGammaOfA)));\n  }\n\n  let an;\n  for (; i <= maxOfIterationsForA; i++) {\n    an = -i * (i - a);\n    b += 2;\n    d = an * d + b;\n    c = b + an / c;\n    d = 1 / d;\n    h *= d * c;\n  }\n\n  return (1 - h * Math.exp(-x + a * Math.log(x) - (logGammaOfA)));\n};\n","const logGamma = require('./logGamma.js');\nconst regLowGamma = require('./regLowGamma.js');\n\nmodule.exports = function invRegLowGamma(p, a) {\n  if (isNaN(p)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param \"p\" is not an number.');\n  } else if (isNaN(a)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param \"a\" is not an number.');\n  } else if (p >= 1) {\n    return Math.max(100, a + 100 * Math.sqrt(a));\n  } else if (p <= 0) {\n    return 0;\n  }\n\n  const a1 = a - 1;\n  const EPS = 1e-8;\n  const gln = logGamma(a);\n  let inverseRegLowGamma;\n  let err;\n  let t;\n  let u;\n  let pp;\n  let lna1;\n  let afac;\n\n  if (a > 1) {\n    lna1 = Math.log(a1);\n    afac = Math.exp(a1 * (lna1 - 1) - gln);\n    pp = (p < 0.5) ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    inverseRegLowGamma = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5) {\n      inverseRegLowGamma = -inverseRegLowGamma;\n    }\n    inverseRegLowGamma = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - inverseRegLowGamma / (3 * Math.sqrt(a)), 3));\n  } else {\n    t = 1 - a * (0.253 + a * 0.12);\n    if (p < t) {\n      inverseRegLowGamma = Math.pow(p / t, 1 / a);\n    } else {\n      inverseRegLowGamma = 1 - Math.log(1 - (p - t) / (1 - t));\n    }\n  }\n\n  for (let j = 0; j < 12; j++) {\n    if (inverseRegLowGamma <= 0) {\n      return 0;\n    }\n    err = regLowGamma(a, inverseRegLowGamma) - p;\n    if (a > 1) {\n      t = afac * Math.exp(-(inverseRegLowGamma - a1) + a1 * (Math.log(inverseRegLowGamma) - lna1));\n    } else {\n      t = Math.exp(-inverseRegLowGamma + a1 * Math.log(inverseRegLowGamma) - gln);\n    }\n    u = err / t;\n    inverseRegLowGamma -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / inverseRegLowGamma - 1))));\n    if (inverseRegLowGamma <= 0) {\n      inverseRegLowGamma = 0.5 * (inverseRegLowGamma + t);\n    }\n    if (Math.abs(t) < EPS * inverseRegLowGamma) {\n      break;\n    }\n  }\n\n  return inverseRegLowGamma;\n};\n","const invRegLowGamma = require('./invRegLowGamma.js');\n\nmodule.exports = function invChiSquareCDF(probability, degreeOfFreedom) {\n  if (isNaN(probability)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param \"probability\" is not an number.');\n  } else if (isNaN(degreeOfFreedom)) {\n    // TODO fix: booleans and strings like '123' will not fall here.\n    throw new Error('The value in param \"degreeOfFreedom\" is not an number.');\n  } else if (probability >= 1 || probability <= 0) {\n    throw new Error('The number in param \"probability\" must lie in the interval [0 1].');\n  } else if (degreeOfFreedom <= 0) {\n    throw new Error('The number in param \"degreeOfFreedom\" must be greater than 0.');\n  }\n\n  return 2 * invRegLowGamma(probability, 0.5 * degreeOfFreedom);\n};\n","const invChiSquareCDF = require('./invChiSquareCDF.js');\nconst invRegLowGamma = require('./invRegLowGamma.js');\nconst logGamma = require('./logGamma.js');\nconst regLowGamma = require('./regLowGamma.js');\n\nmodule.exports = {\n  invChiSquareCDF: (probability, degreeOfFreedom)=>invChiSquareCDF(probability, degreeOfFreedom),\n  invRegLowGamma: (p, a)=>invRegLowGamma(p, a),\n  logGamma: (x)=>logGamma(x),\n  regLowGamma: (a, x)=>regLowGamma(a, x),\n};\n","/*\nCopy-paste from view-source:https://www.math.ucla.edu/~tom/distributions/chisq.html\n*/\nfunction LogGamma(Z: number) {\n  const S =\n    1 +\n    76.18009173 / Z -\n    86.50532033 / (Z + 1) +\n    24.01409822 / (Z + 2) -\n    1.231739516 / (Z + 3) +\n    0.00120858003 / (Z + 4) -\n    0.00000536382 / (Z + 5);\n  const LG =\n    (Z - 0.5) * Math.log(Z + 4.5) - (Z + 4.5) + Math.log(S * 2.50662827465);\n\n  return LG;\n}\n\nfunction Gcf(X: number, A: number) {\n  // Good for X>A+1\n\n  let A0 = 0;\n  let B0 = 1;\n  let A1 = 1;\n  let B1 = X;\n  let AOLD = 0;\n  let N = 0;\n  while (Math.abs((A1 - AOLD) / A1) > 0.00001) {\n    AOLD = A1;\n    N = N + 1;\n    A0 = A1 + (N - A) * A0;\n    B0 = B1 + (N - A) * B0;\n    A1 = X * A0 + N * A1;\n    B1 = X * B0 + N * B1;\n    A0 = A0 / B1;\n    B0 = B0 / B1;\n    A1 = A1 / B1;\n    B1 = 1;\n  }\n  const Prob = Math.exp(A * Math.log(X) - X - LogGamma(A)) * A1;\n\n  return 1 - Prob;\n}\n\nfunction Gser(X: number, A: number) {\n  // Good for X<A+1.\n\n  let T9 = 1 / A;\n  let G = T9;\n  let I = 1;\n  while (T9 > G * 0.00001) {\n    T9 = (T9 * X) / (A + I);\n    G = G + T9;\n    I = I + 1;\n  }\n  G = G * Math.exp(A * Math.log(X) - X - LogGamma(A));\n\n  return G;\n}\n\nfunction Gammacdf(x: number, a: number) {\n  let GI;\n  if (x <= 0) {\n    GI = 0;\n  } else if (x < a + 1) {\n    GI = Gser(x, a);\n  } else {\n    GI = Gcf(x, a);\n  }\n  return GI;\n}\n\nexport function js_chi_square(DF: number, Z: number) {\n  if (DF <= 0) {\n    throw new Error(\"Degrees of freedom must be positive\");\n  }\n  const Chisqcdf = Gammacdf(Z / 2, DF / 2);\n  return Chisqcdf;\n}\n","// Downloaded from https://code.google.com/archive/p/statistics-distributions-js/downloads\n// Applied fix https://code.google.com/archive/p/statistics-distributions-js/issues/2\n\n/*\n * NAME\n *\n * statistics-distributions.js - JavaScript library for calculating\n *   critical values and upper probabilities of common statistical\n *   distributions\n *\n * SYNOPSIS\n *\n *\n *   // Chi-squared-crit (2 degrees of freedom, 95th percentile = 0.05 level\n *   chisqrdistr(2, .05)\n *\n *   // u-crit (95th percentile = 0.05 level)\n *   udistr(.05);\n *\n *   // t-crit (1 degree of freedom, 99.5th percentile = 0.005 level)\n *   tdistr(1,.005);\n *\n *   // F-crit (1 degree of freedom in numerator, 3 degrees of freedom\n *   //         in denominator, 99th percentile = 0.01 level)\n *   fdistr(1,3,.01);\n *\n *   // upper probability of the u distribution (u = -0.85): Q(u) = 1-G(u)\n *   uprob(-0.85);\n *\n *   // upper probability of the chi-square distribution\n *   // (3 degrees of freedom, chi-squared = 6.25): Q = 1-G\n *   chisqrprob(3,6.25);\n *\n *   // upper probability of the t distribution\n *   // (3 degrees of freedom, t = 6.251): Q = 1-G\n *   tprob(3,6.251);\n *\n *   // upper probability of the F distribution\n *   // (3 degrees of freedom in numerator, 5 degrees of freedom in\n *   //  denominator, F = 6.25): Q = 1-G\n *   fprob(3,5,.625);\n *\n *\n *  DESCRIPTION\n *\n * This library calculates percentage points (5 significant digits) of the u\n * (standard normal) distribution, the student's t distribution, the\n * chi-square distribution and the F distribution. It can also calculate the\n * upper probability (5 significant digits) of the u (standard normal), the\n * chi-square, the t and the F distribution.\n *\n * These critical values are needed to perform statistical tests, like the u\n * test, the t test, the F test and the chi-squared test, and to calculate\n * confidence intervals.\n *\n * If you are interested in more precise algorithms you could look at:\n *   StatLib: http://lib.stat.cmu.edu/apstat/ ;\n *   Applied Statistics Algorithms by Griffiths, P. and Hill, I.D.\n *   , Ellis Horwood: Chichester (1985)\n *\n * BUGS\n *\n * This port was produced from the Perl module Statistics::Distributions\n * that has had no bug reports in several years.  If you find a bug then\n * please double-check that JavaScript does not thing the numbers you are\n * passing in are strings.  (You can subtract 0 from them as you pass them\n * in so that \"5\" is properly understood to be 5.)  If you have passed in a\n * number then please contact the author\n *\n * AUTHOR\n *\n * Ben Tilly <btilly@gmail.com>\n *\n * Originl Perl version by Michael Kospach <mike.perl@gmx.at>\n *\n * Nice formating, simplification and bug repair by Matthias Trautner Kromann\n * <mtk@id.cbs.dk>\n *\n * COPYRIGHT\n *\n * Copyright 2008 Ben Tilly.\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the same terms as Perl itself.  This means under either the Perl\n * Artistic License or the GPL v1 or later.\n */\n\nvar SIGNIFICANT = 5; // number of significant digits to be returned\n\nfunction chisqrdistr($n: number, $p: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\"; /* degree of freedom */\n  }\n  if ($p <= 0 || $p > 1) {\n    throw \"Invalid p: $p\\n\";\n  }\n  return precision_string(_subchisqr($n - 0, $p - 0));\n}\n\nfunction udistr($p: number) {\n  if ($p > 1 || $p <= 0) {\n    throw \"Invalid p: $p\\n\";\n  }\n  return precision_string(_subu($p - 0));\n}\n\nfunction tdistr($n: number, $p: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\";\n  }\n  if ($p <= 0 || $p >= 1) {\n    throw \"Invalid p: $p\\n\";\n  }\n  return precision_string(_subt($n - 0, $p - 0));\n}\n\nexport function fdistr($n: number, $m: number, $p: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\"; /* first degree of freedom */\n  }\n  if ($m <= 0 || Math.abs($m) - Math.abs(integer($m)) != 0) {\n    throw \"Invalid m: $m\\n\"; /* second degree of freedom */\n  }\n  if ($p <= 0 || $p > 1) {\n    throw \"Invalid p: $p\\n\";\n  }\n  return precision_string(_subf($n - 0, $m - 0, $p - 0));\n}\n\nfunction uprob($x: number) {\n  return precision_string(_subuprob($x - 0));\n}\n\nfunction chisqrprob($n: number, $x: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\"; /* degree of freedom */\n  }\n  return precision_string(_subchisqrprob($n - 0, $x - 0));\n}\n\nfunction tprob($n: number, $x: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\"; /* degree of freedom */\n  }\n  return precision_string(_subtprob($n - 0, $x - 0));\n}\n\nfunction fprob($n: number, $m: number, $x: number) {\n  if ($n <= 0 || Math.abs($n) - Math.abs(integer($n)) != 0) {\n    throw \"Invalid n: $n\\n\"; /* first degree of freedom */\n  }\n  if ($m <= 0 || Math.abs($m) - Math.abs(integer($m)) != 0) {\n    throw \"Invalid m: $m\\n\"; /* second degree of freedom */\n  }\n  return precision_string(_subfprob($n - 0, $m - 0, $x - 0));\n}\n\nfunction _subfprob($n: number, $m: number, $x: number) {\n  var $p;\n\n  if ($x <= 0) {\n    $p = 1;\n  } else if ($m % 2 == 0) {\n    var $z = $m / ($m + $n * $x);\n    var $a = 1;\n    for (var $i = $m - 2; $i >= 2; $i -= 2) {\n      $a = 1 + (($n + $i - 2) / $i) * $z * $a;\n    }\n    // $p = 1 - Math.pow(1 - $z, ($n / 2) * $a);\n    $p = 1 - Math.pow(1 - $z, $n / 2) * $a;\n  } else if ($n % 2 == 0) {\n    var $z = ($n * $x) / ($m + $n * $x);\n    var $a = 1;\n    for (var $i = $n - 2; $i >= 2; $i -= 2) {\n      $a = 1 + (($m + $i - 2) / $i) * $z * $a;\n    }\n    $p = Math.pow(1 - $z, $m / 2) * $a;\n  } else {\n    var $y = Math.atan2(Math.sqrt(($n * $x) / $m), 1);\n    var $z = Math.pow(Math.sin($y), 2);\n    var $a = $n == 1 ? 0 : 1;\n    for (var $i = $n - 2; $i >= 3; $i -= 2) {\n      $a = 1 + (($m + $i - 2) / $i) * $z * $a;\n    }\n    var $b = Math.PI;\n    for (var $i = 2; $i <= $m - 1; $i += 2) {\n      $b *= ($i - 1) / $i;\n    }\n    var $p1 = (2 / $b) * Math.sin($y) * Math.pow(Math.cos($y), $m) * $a;\n\n    $z = Math.pow(Math.cos($y), 2);\n    $a = $m == 1 ? 0 : 1;\n    for (var $i = $m - 2; $i >= 3; $i -= 2) {\n      $a = 1 + (($i - 1) / $i) * $z * $a;\n    }\n    $p = max(\n      0,\n      $p1 +\n        1 -\n        (2 * $y) / Math.PI -\n        (2 / Math.PI) * Math.sin($y) * Math.cos($y) * $a\n    );\n  }\n  return $p;\n}\n\nfunction _subchisqrprob($n: number, $x: number) {\n  var $p;\n\n  if ($x <= 0) {\n    $p = 1;\n  } else if ($n > 100) {\n    $p = _subuprob(\n      (Math.pow($x / $n, 1 / 3) - (1 - 2 / 9 / $n)) / Math.sqrt(2 / 9 / $n)\n    );\n  } else if ($x > 400) {\n    $p = 0;\n  } else {\n    var $a;\n    var $i;\n    var $i1;\n    if ($n % 2 != 0) {\n      $p = 2 * _subuprob(Math.sqrt($x));\n      $a = (Math.sqrt(2 / Math.PI) * Math.exp(-$x / 2)) / Math.sqrt($x);\n      $i1 = 1;\n    } else {\n      $p = $a = Math.exp(-$x / 2);\n      $i1 = 2;\n    }\n\n    for ($i = $i1; $i <= $n - 2; $i += 2) {\n      $a *= $x / $i;\n      $p += $a;\n    }\n  }\n  return $p;\n}\n\nfunction _subu($p: number) {\n  var $y = -Math.log(4 * $p * (1 - $p));\n  var $x = Math.sqrt(\n    $y *\n      (1.570796288 +\n        $y *\n          (0.03706987906 +\n            $y *\n              (-0.8364353589e-3 +\n                $y *\n                  (-0.2250947176e-3 +\n                    $y *\n                      (0.6841218299e-5 +\n                        $y *\n                          (0.5824238515e-5 +\n                            $y *\n                              (-0.104527497e-5 +\n                                $y *\n                                  (0.8360937017e-7 +\n                                    $y *\n                                      (-0.3231081277e-8 +\n                                        $y *\n                                          (0.3657763036e-10 +\n                                            $y * 0.6936233982e-12))))))))))\n  );\n  if ($p > 0.5) $x = -$x;\n  return $x;\n}\n\nfunction _subuprob($x: number) {\n  var $p = 0; /* if ($absx > 100) */\n  var $absx = Math.abs($x);\n\n  if ($absx < 1.9) {\n    $p =\n      Math.pow(\n        1 +\n          $absx *\n            (0.049867347 +\n              $absx *\n                (0.0211410061 +\n                  $absx *\n                    (0.0032776263 +\n                      $absx *\n                        (0.0000380036 +\n                          $absx * (0.0000488906 + $absx * 0.000005383))))),\n        -16\n      ) / 2;\n  } else if ($absx <= 100) {\n    for (var $i = 18; $i >= 1; $i--) {\n      $p = $i / ($absx + $p);\n    }\n    $p = Math.exp(-0.5 * $absx * $absx) / Math.sqrt(2 * Math.PI) / ($absx + $p);\n  }\n\n  if ($x < 0) $p = 1 - $p;\n  return $p;\n}\n\nfunction _subt($n: number, $p: number) {\n  if ($p >= 1 || $p <= 0) {\n    throw \"Invalid p: $p\\n\";\n  }\n\n  if ($p == 0.5) {\n    return 0;\n  } else if ($p < 0.5) {\n    return -_subt($n, 1 - $p);\n  }\n\n  var $u = _subu($p);\n  var $u2 = Math.pow($u, 2);\n\n  var $a = ($u2 + 1) / 4;\n  var $b = ((5 * $u2 + 16) * $u2 + 3) / 96;\n  var $c = (((3 * $u2 + 19) * $u2 + 17) * $u2 - 15) / 384;\n  var $d = ((((79 * $u2 + 776) * $u2 + 1482) * $u2 - 1920) * $u2 - 945) / 92160;\n  var $e =\n    (((((27 * $u2 + 339) * $u2 + 930) * $u2 - 1782) * $u2 - 765) * $u2 +\n      17955) /\n    368640;\n\n  var $x = $u * (1 + ($a + ($b + ($c + ($d + $e / $n) / $n) / $n) / $n) / $n);\n\n  if ($n <= Math.pow(log10($p), 2) + 3) {\n    var $round;\n    do {\n      var $p1 = _subtprob($n, $x);\n      var $n1 = $n + 1;\n      var $delta =\n        ($p1 - $p) /\n        Math.exp(\n          ($n1 * Math.log($n1 / ($n + $x * $x)) +\n            Math.log($n / $n1 / 2 / Math.PI) -\n            1 +\n            (1 / $n1 - 1 / $n) / 6) /\n            2\n        );\n      $x += $delta;\n      $round = round_to_precision(\n        $delta,\n        Math.abs(integer(log10(Math.abs($x)) - 4))\n      );\n    } while ($x && $round != 0);\n  }\n  return $x;\n}\n\nfunction _subtprob($n: number, $x: number) {\n  var $a;\n  var $b;\n  var $w = Math.atan2($x / Math.sqrt($n), 1);\n  var $z = Math.pow(Math.cos($w), 2);\n  var $y = 1;\n\n  for (var $i = $n - 2; $i >= 2; $i -= 2) {\n    $y = 1 + (($i - 1) / $i) * $z * $y;\n  }\n\n  if ($n % 2 == 0) {\n    $a = Math.sin($w) / 2;\n    $b = 0.5;\n  } else {\n    $a = $n == 1 ? 0 : (Math.sin($w) * Math.cos($w)) / Math.PI;\n    $b = 0.5 + $w / Math.PI;\n  }\n  return max(0, 1 - $b - $a * $y);\n}\n\nfunction _subf($n: number, $m: number, $p: number) {\n  var $x;\n\n  if ($p >= 1 || $p <= 0) {\n    throw \"Invalid p: $p\\n\";\n  }\n\n  if ($p == 1) {\n    $x = 0;\n  } else if ($m == 1) {\n    $x = 1 / Math.pow(_subt($n, 0.5 - $p / 2), 2);\n  } else if ($n == 1) {\n    $x = Math.pow(_subt($m, $p / 2), 2);\n  } else if ($m == 2) {\n    var $u = _subchisqr($m, 1 - $p);\n    var $a = $m - 2;\n    $x =\n      1 /\n      (($u / $m) *\n        (1 +\n          (($u - $a) / 2 +\n            (((4 * $u - 11 * $a) * $u + $a * (7 * $m - 10)) / 24 +\n              (((2 * $u - 10 * $a) * $u + $a * (17 * $m - 26)) * $u -\n                $a * $a * (9 * $m - 6)) /\n                48 /\n                $n) /\n              $n) /\n            $n));\n  } else if ($n > $m) {\n    $x = 1 / _subf2($m, $n, 1 - $p);\n  } else {\n    $x = _subf2($n, $m, $p);\n  }\n  return $x;\n}\n\nfunction _subf2($n: number, $m: number, $p: number) {\n  var $u = _subchisqr($n, $p);\n  var $n2 = $n - 2;\n  var $x =\n    ($u / $n) *\n    (1 +\n      (($u - $n2) / 2 +\n        (((4 * $u - 11 * $n2) * $u + $n2 * (7 * $n - 10)) / 24 +\n          (((2 * $u - 10 * $n2) * $u + $n2 * (17 * $n - 26)) * $u -\n            $n2 * $n2 * (9 * $n - 6)) /\n            48 /\n            $m) /\n          $m) /\n        $m);\n  var $delta;\n  do {\n    var $z = Math.exp(\n      (($n + $m) * Math.log(($n + $m) / ($n * $x + $m)) +\n        ($n - 2) * Math.log($x) +\n        Math.log(($n * $m) / ($n + $m)) -\n        Math.log(4 * Math.PI) -\n        (1 / $n + 1 / $m - 1 / ($n + $m)) / 6) /\n        2\n    );\n    $delta = (_subfprob($n, $m, $x) - $p) / $z;\n    $x += $delta;\n  } while (Math.abs($delta) > 3e-4);\n  return $x;\n}\n\nfunction _subchisqr($n: number, $p: number) {\n  var $x;\n\n  if ($p > 1 || $p <= 0) {\n    throw \"Invalid p: $p\\n\";\n  } else if ($p == 1) {\n    $x = 0;\n  } else if ($n == 1) {\n    $x = Math.pow(_subu($p / 2), 2);\n  } else if ($n == 2) {\n    $x = -2 * Math.log($p);\n  } else {\n    var $u = _subu($p);\n    var $u2 = $u * $u;\n\n    $x = max(\n      0,\n      $n +\n        Math.sqrt(2 * $n) * $u +\n        (2 / 3) * ($u2 - 1) +\n        ($u * ($u2 - 7)) / 9 / Math.sqrt(2 * $n) -\n        (2 / 405 / $n) * ($u2 * (3 * $u2 + 7) - 16)\n    );\n\n    if ($n <= 100) {\n      var $x0;\n      var $p1;\n      var $z;\n      do {\n        $x0 = $x;\n        if ($x < 0) {\n          $p1 = 1;\n        } else if ($n > 100) {\n          $p1 = _subuprob(\n            (Math.pow($x / $n, 1 / 3) - (1 - 2 / 9 / $n)) /\n              Math.sqrt(2 / 9 / $n)\n          );\n        } else if ($x > 400) {\n          $p1 = 0;\n        } else {\n          var $i0;\n          var $a;\n          if ($n % 2 != 0) {\n            $p1 = 2 * _subuprob(Math.sqrt($x));\n            $a = (Math.sqrt(2 / Math.PI) * Math.exp(-$x / 2)) / Math.sqrt($x);\n            $i0 = 1;\n          } else {\n            $p1 = $a = Math.exp(-$x / 2);\n            $i0 = 2;\n          }\n\n          for (var $i = $i0; $i <= $n - 2; $i += 2) {\n            $a *= $x / $i;\n            $p1 += $a;\n          }\n        }\n        $z = Math.exp(\n          (($n - 1) * Math.log($x / $n) -\n            Math.log(4 * Math.PI * $x) +\n            $n -\n            $x -\n            1 / $n / 6) /\n            2\n        );\n        $x += ($p1 - $p) / $z;\n        $x = round_to_precision($x, 5);\n      } while ($n < 31 && Math.abs($x0 - $x) > 1e-4);\n    }\n  }\n  return $x;\n}\n\nfunction log10($n: number) {\n  return Math.log($n) / Math.log(10);\n}\n\nfunction max(...args: number[]) {\n  var $max = args[0];\n  for (var $i = 0; $i < args.length; $i++) {\n    if ($max < args[$i]) $max = args[$i];\n  }\n  return $max;\n}\n\nfunction min(...args: number[]) {\n  var $min = args[0];\n  for (var $i = 0; $i < args.length; $i++) {\n    if ($min > args[$i]) $min = args[$i];\n  }\n  return $min;\n}\n\nfunction precision($x: number) {\n  return Math.abs(integer(log10(Math.abs($x)) - SIGNIFICANT));\n}\n\nfunction precision_string($x: number) {\n  if ($x) {\n    return round_to_precision($x, precision($x));\n  } else {\n    return \"0\";\n  }\n}\n\nfunction round_to_precision($x: number, $p: number) {\n  $x = $x * Math.pow(10, $p);\n  $x = Math.round($x);\n  return $x / Math.pow(10, $p);\n}\n\nfunction integer($i: number) {\n  if ($i > 0) return Math.floor($i);\n  else return Math.ceil($i);\n}\n","import * as jsstats from \"js-stats\";\nimport { invChiSquareCDF } from \"inv-chisquare-cdf\";\nimport { js_chi_square } from \"./stat.chi_square\";\nimport { fdistr } from \"./stat.statistics-distributions-001\";\n\nexport function std_cumulative_distribution(n: number): number {\n  const normalDistribution = new jsstats.NormalDistribution(0, 1);\n  return normalDistribution.cumulativeProbability(n);\n}\n\nexport function inv_standart_deviation(n: number): number {\n  const normalDistribution = new jsstats.NormalDistribution(0, 1);\n  return normalDistribution.invCumulativeProbability(n);\n}\nexport function inv_student(\n  degreesOfFreedom: number,\n  probabilty: number\n): number {\n  const t_distribution = new jsstats.TDistribution(degreesOfFreedom);\n  const t_df = t_distribution.invCumulativeProbability(probabilty);\n  return t_df;\n}\n\nexport function student(degreesOfFreedom: number, tValue: number): number {\n  const t_distribution = new jsstats.TDistribution(degreesOfFreedom);\n  const probability = t_distribution.cumulativeProbability(tValue);\n  return probability;\n}\n\nexport function inv_chi_square(\n  degreesOfFreedom: number,\n  probabilty: number\n): number {\n  const val = invChiSquareCDF(probabilty, degreesOfFreedom);\n  return val;\n}\n\nexport function chi_square(degreesOfFreedom: number, value: number): number {\n  // js-stats version gives wrong data\n  return js_chi_square(degreesOfFreedom, value);\n}\n\nfunction assert(x1: number, x2: number, errDigits = 3) {\n  const digits = 10 ** errDigits;\n  if (Math.round(x1 * digits) != Math.round(x2 * digits)) {\n    throw new Error(\n      `x1=${x1} ${Math.round(x1 * digits)} x2=${x2} ${Math.round(x2 * digits)}`\n    );\n  }\n\n  const warnDigits = 10 ** (errDigits + 2);\n  if (Math.round(x1 * warnDigits) != Math.round(x2 * warnDigits)) {\n    console.warn(\n      `Self-check warning: x1=${x1} x2=${x2} (${Math.round(\n        x1 * warnDigits\n      )}, ${Math.round(x2 * warnDigits)})`\n    );\n  }\n}\n\nexport function fisher(df1: number, df2: number, value: number) {\n  const f_distribution = new jsstats.FDistribution(df1, df2);\n  const p = f_distribution.cumulativeProbability(value); // cumulative probability\n  return p;\n}\nexport function inv_fisher(df1: number, df2: number, probability = 0.05) {\n  return fdistr(df1, df2, probability) as number;\n}\n\nconsole.info(`Self-testing inv_chi_square...`);\nassert(inv_chi_square(10, 0.95), 18.3, 1);\nassert(inv_chi_square(20, 0.3), 16.3, 1);\nassert(inv_chi_square(6, 0.99), 16.8, 1);\nassert(inv_chi_square(4 - 1, 0.95), 7.81, 1);\n\nconsole.info(`Self-testing chi_square...`);\nassert(chi_square(10, 18.3), 0.95);\nassert(chi_square(20, 16.3), 0.3, 2);\nassert(chi_square(6, 16.8), 0.99);\nassert(chi_square(4 - 1, 7.81), 0.95);\n\nconsole.info(`Self-testing int_student...`);\nassert(inv_student(10, 0.75), 0.7);\nassert(inv_student(10, 0.995), 3.169);\nassert(inv_student(20, 0.95), 1.725);\nassert(inv_student(15, 0.95), 1.753);\n\nconsole.info(`Self-testing student...`);\nassert(student(10, 0.7), 0.75);\nassert(student(10, 3.169), 0.995);\nassert(student(20, 1.725), 0.95);\nassert(student(15, 1.753), 0.95);\n\nconsole.info(`Self-testing inv_standart_deviation...`);\nassert(inv_standart_deviation(0.9), 1.282);\nassert(inv_standart_deviation(0.95), 1.645);\nassert(inv_standart_deviation(0.99), 2.326, 1);\nassert(inv_standart_deviation(0.999), 3.09, 1);\n\nconsole.info(`Self-testing standart_deviation...`);\nassert(std_cumulative_distribution(0), 0.5, 4);\nassert(std_cumulative_distribution(1.05), 0.8531, 4);\nassert(std_cumulative_distribution(0.59), 0.7224, 4);\nassert(std_cumulative_distribution(3.14), 0.9992, 4);\n\nconsole.info(`Self-testing fisher...`);\nassert(fisher(3, 5, 5.41), 1 - 0.05);\nassert(fisher(2, 12, 3.88), 1 - 0.05);\nassert(fisher(12, 13, 2.6), 1 - 0.05);\nassert(fisher(5, 150, 2.27), 1 - 0.05);\n\nconsole.info(`Self-testing inv_fisher...`);\n\nassert(inv_fisher(4, 7, 0.05), 4.12);\nassert(inv_fisher(3, 5, 0.05), 5.41, 2);\nassert(inv_fisher(2, 12, 0.05), 3.88, 1);\nassert(inv_fisher(12, 13, 0.05), 2.6, 2);\nassert(inv_fisher(5, 150, 0.05), 2.27, 2);\n\nconsole.info(`Self-test is done`);\n","import { getNormalSet, getEstimateMean, getEstimateD, log } from \"./lib\";\nimport { inv_standart_deviation, inv_student, inv_chi_square } from \"./stat\";\n\nconst DIST_SIGMA = 4;\nconst DIST_A = 50;\n\nlog(`Используем распределение N[${DIST_A}, ${DIST_SIGMA}²]`);\nconst mySelection = getNormalSet(20).map((x) =>\n  Math.round(x * DIST_SIGMA + DIST_A)\n);\n\n/*\nconst mySelection = [\n  ...new Array(10).fill(-1),\n  ...new Array(5).fill(0),\n  ...new Array(15).fill(1),\n  ...new Array(15).fill(2),\n  ...new Array(5).fill(3),\n];\n*/\n\nconst n = mySelection.length;\n\nmySelection.sort((a, b) => a - b);\nlog(`Выборка из n=${n} элементов:`);\nlog(mySelection.map((x) => x).join(\" \"));\n\nconst selectionMean = getEstimateMean(mySelection, n);\nconst selectionD = getEstimateD(mySelection, selectionMean, n);\nconst selectionS = Math.sqrt(selectionD);\nlog(`Среднее выборки = ${selectionMean}`);\nlog(`S² = ${selectionD}, S=${selectionS}`);\n\nlog(\"\");\n\nlog(\"\");\nfor (const alpha of [0.1, 0.05, 0.01]) {\n  log(`𝛼=${alpha} (${((1 - alpha) * 100).toFixed(2)}%)`);\n  log(`  Мат.ожидание при известной дисперсии`);\n\n  const u_a_input = 1 - alpha / 2;\n  const u: number = inv_standart_deviation(u_a_input);\n  log(`    1-𝛼/a = ${u_a_input}`);\n  log(`    u(1-𝛼/2)=${u}`);\n\n  const err = (u * DIST_SIGMA) / Math.sqrt(n);\n\n  const a = selectionMean - err;\n  const b = selectionMean + err;\n  log(`    Интервал = [${a.toFixed(2)} .. ${b.toFixed(2)}]`);\n\n  log(`  Мат.ожидание при неизвестной дисперсии`);\n  const student_quantile = inv_student(n - 1, u_a_input);\n  log(`    τ(n-1, 1-𝛼/2)=${student_quantile}`);\n  log(`    S=${selectionS}`);\n  const err2 = (student_quantile * selectionS) / Math.sqrt(n);\n  const a2 = selectionMean - err2;\n  const b2 = selectionMean + err2;\n  log(`    Интервал = [${a2.toFixed(2)} .. ${b2.toFixed(2)}]`);\n\n  log(`  Дисперсия`);\n  const z1 = inv_chi_square(n - 1, 1 - alpha / 2);\n  const z2 = inv_chi_square(n - 1, alpha / 2);\n  log(`    z1=${z1}`);\n  log(`    z2=${z2}`);\n\n  const Da = (n * selectionD) / z1;\n  const Db = (n * selectionD) / z2;\n  log(`    ВНИМАНИЕ: Используется N вместо N-1`);\n  log(`    Интервал = [${Da.toFixed(2)}..${Db.toFixed(2)}]`);\n\n  log(\"\");\n}\n"]}